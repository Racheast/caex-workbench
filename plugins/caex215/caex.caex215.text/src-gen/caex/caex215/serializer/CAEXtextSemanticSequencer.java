/*
 * generated by Xtext 2.12.0
 */
package caex.caex215.serializer;

import caex.anytype.AnytypePackage;
import caex.anytype.GenericAttribute;
import caex.anytype.GenericElement;
import caex.caex215.caex.AdditionalInformation;
import caex.caex215.caex.Attribute;
import caex.caex215.caex.AttributeNameMapping;
import caex.caex215.caex.AttributeValueRequirement;
import caex.caex215.caex.CAEXFile;
import caex.caex215.caex.CAEXPackage;
import caex.caex215.caex.Copyright;
import caex.caex215.caex.Description;
import caex.caex215.caex.ExternalInterface;
import caex.caex215.caex.ExternalReference;
import caex.caex215.caex.InstanceHierarchy;
import caex.caex215.caex.InterfaceClass;
import caex.caex215.caex.InterfaceClassLib;
import caex.caex215.caex.InterfaceNameMapping;
import caex.caex215.caex.InternalElement;
import caex.caex215.caex.InternalLink;
import caex.caex215.caex.Mapping;
import caex.caex215.caex.NominalScaled;
import caex.caex215.caex.OrdinalScaled;
import caex.caex215.caex.RefSemantic;
import caex.caex215.caex.Revision;
import caex.caex215.caex.RoleClass;
import caex.caex215.caex.RoleClassLib;
import caex.caex215.caex.RoleFamily;
import caex.caex215.caex.RoleRequirements;
import caex.caex215.caex.SupportedRoleClass;
import caex.caex215.caex.SystemUnitClass;
import caex.caex215.caex.SystemUnitClassLib;
import caex.caex215.caex.SystemUnitFamily;
import caex.caex215.caex.UnknownType;
import caex.caex215.caex.Version;
import caex.caex215.services.CAEXtextGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class CAEXtextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CAEXtextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnytypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnytypePackage.GENERIC_ATTRIBUTE:
				sequence_GenericAttribute(context, (GenericAttribute) semanticObject); 
				return; 
			case AnytypePackage.GENERIC_ELEMENT:
				sequence_GenericElement(context, (GenericElement) semanticObject); 
				return; 
			}
		else if (epackage == CAEXPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CAEXPackage.ADDITIONAL_INFORMATION:
				sequence_AdditionalInformation(context, (AdditionalInformation) semanticObject); 
				return; 
			case CAEXPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case CAEXPackage.ATTRIBUTE_NAME_MAPPING:
				sequence_AttributeNameMapping(context, (AttributeNameMapping) semanticObject); 
				return; 
			case CAEXPackage.ATTRIBUTE_VALUE_REQUIREMENT:
				sequence_AttributeValueRequirement(context, (AttributeValueRequirement) semanticObject); 
				return; 
			case CAEXPackage.CAEX_FILE:
				sequence_CAEXFile(context, (CAEXFile) semanticObject); 
				return; 
			case CAEXPackage.COPYRIGHT:
				sequence_Copyright(context, (Copyright) semanticObject); 
				return; 
			case CAEXPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case CAEXPackage.EXTERNAL_INTERFACE:
				sequence_ExternalInterface(context, (ExternalInterface) semanticObject); 
				return; 
			case CAEXPackage.EXTERNAL_REFERENCE:
				sequence_ExternalReference(context, (ExternalReference) semanticObject); 
				return; 
			case CAEXPackage.INSTANCE_HIERARCHY:
				sequence_InstanceHierarchy(context, (InstanceHierarchy) semanticObject); 
				return; 
			case CAEXPackage.INTERFACE_CLASS:
				sequence_InterfaceClass_Impl(context, (InterfaceClass) semanticObject); 
				return; 
			case CAEXPackage.INTERFACE_CLASS_LIB:
				sequence_InterfaceClassLib(context, (InterfaceClassLib) semanticObject); 
				return; 
			case CAEXPackage.INTERFACE_NAME_MAPPING:
				sequence_InterfaceNameMapping(context, (InterfaceNameMapping) semanticObject); 
				return; 
			case CAEXPackage.INTERNAL_ELEMENT:
				sequence_InternalElement(context, (InternalElement) semanticObject); 
				return; 
			case CAEXPackage.INTERNAL_LINK:
				sequence_InternalLink(context, (InternalLink) semanticObject); 
				return; 
			case CAEXPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case CAEXPackage.NOMINAL_SCALED:
				sequence_NominalScaled(context, (NominalScaled) semanticObject); 
				return; 
			case CAEXPackage.ORDINAL_SCALED:
				sequence_OrdinalScaled(context, (OrdinalScaled) semanticObject); 
				return; 
			case CAEXPackage.REF_SEMANTIC:
				sequence_RefSemantic(context, (RefSemantic) semanticObject); 
				return; 
			case CAEXPackage.REVISION:
				sequence_Revision(context, (Revision) semanticObject); 
				return; 
			case CAEXPackage.ROLE_CLASS:
				sequence_RoleClass_Impl(context, (RoleClass) semanticObject); 
				return; 
			case CAEXPackage.ROLE_CLASS_LIB:
				sequence_RoleClassLib(context, (RoleClassLib) semanticObject); 
				return; 
			case CAEXPackage.ROLE_FAMILY:
				sequence_RoleFamily(context, (RoleFamily) semanticObject); 
				return; 
			case CAEXPackage.ROLE_REQUIREMENTS:
				sequence_RoleRequirements(context, (RoleRequirements) semanticObject); 
				return; 
			case CAEXPackage.SUPPORTED_ROLE_CLASS:
				sequence_SupportedRoleClass(context, (SupportedRoleClass) semanticObject); 
				return; 
			case CAEXPackage.SYSTEM_UNIT_CLASS:
				sequence_SystemUnitClass_Impl(context, (SystemUnitClass) semanticObject); 
				return; 
			case CAEXPackage.SYSTEM_UNIT_CLASS_LIB:
				sequence_SystemUnitClassLib(context, (SystemUnitClassLib) semanticObject); 
				return; 
			case CAEXPackage.SYSTEM_UNIT_FAMILY:
				sequence_SystemUnitFamily(context, (SystemUnitFamily) semanticObject); 
				return; 
			case CAEXPackage.UNKNOWN_TYPE:
				sequence_UnknownType(context, (UnknownType) semanticObject); 
				return; 
			case CAEXPackage.VERSION:
				sequence_Version(context, (Version) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AdditionalInformation returns AdditionalInformation
	 *
	 * Constraint:
	 *     (name=EString value=EString?)
	 */
	protected void sequence_AdditionalInformation(ISerializationContext context, AdditionalInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeNameMapping returns AttributeNameMapping
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         roleAttributeName=EString 
	 *         systemUnitAttributeName=EString 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)?
	 *     )
	 */
	protected void sequence_AttributeNameMapping(ISerializationContext context, AttributeNameMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeValueRequirement returns AttributeValueRequirement
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         name=EString 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         ordinalScaledType=OrdinalScaled? 
	 *         nominalScaledType=NominalScaled? 
	 *         unknownType=UnknownType?
	 *     )
	 */
	protected void sequence_AttributeValueRequirement(ISerializationContext context, AttributeValueRequirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         attributeDataType=AttributeDataType? 
	 *         value=EString? 
	 *         defaultValue=EString? 
	 *         unit=EString? 
	 *         iD=EString? 
	 *         changeMode=ChangeMode? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (refSemantic+=RefSemantic refSemantic+=RefSemantic*)? 
	 *         (constraint+=AttributeValueRequirement constraint+=AttributeValueRequirement*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)?
	 *     )
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CAEXFile returns CAEXFile
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         fileName=EString 
	 *         schemaVersion=EString 
	 *         (externalReference+=ExternalReference externalReference+=ExternalReference*)? 
	 *         (instanceHierarchy+=InstanceHierarchy instanceHierarchy+=InstanceHierarchy*)? 
	 *         (interfaceClassLib+=InterfaceClassLib interfaceClassLib+=InterfaceClassLib*)? 
	 *         (roleClassLib+=RoleClassLib roleClassLib+=RoleClassLib*)? 
	 *         (systemUnitClassLib+=SystemUnitClassLib systemUnitClassLib+=SystemUnitClassLib*)?
	 *     )
	 */
	protected void sequence_CAEXFile(ISerializationContext context, CAEXFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Copyright returns Copyright
	 *
	 * Constraint:
	 *     (value=EString? changeMode=ChangeMode?)
	 */
	protected void sequence_Copyright(ISerializationContext context, Copyright semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     (value=EString? changeMode=ChangeMode?)
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass returns ExternalInterface
	 *     ExternalInterface returns ExternalInterface
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         iD=EString? 
	 *         name=ID 
	 *         refBaseClassPath=EString? 
	 *         baseClass=[InterfaceClass|ID]? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)? 
	 *         (interfaceClass+=InterfaceClass interfaceClass+=InterfaceClass*)?
	 *     )
	 */
	protected void sequence_ExternalInterface(ISerializationContext context, ExternalInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalReference returns ExternalReference
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         alias=EString 
	 *         path=EString 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)?
	 *     )
	 */
	protected void sequence_ExternalReference(ISerializationContext context, ExternalReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericAttribute returns GenericAttribute
	 *
	 * Constraint:
	 *     (name=EString value=EString?)
	 */
	protected void sequence_GenericAttribute(ISerializationContext context, GenericAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenericElement returns GenericElement
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         value=EString? 
	 *         (nestedElements+=GenericElement nestedElements+=GenericElement*)? 
	 *         (attributes+=GenericAttribute attributes+=GenericAttribute*)?
	 *     )
	 */
	protected void sequence_GenericElement(ISerializationContext context, GenericElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InstanceHierarchy returns InstanceHierarchy
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         iD=EString? 
	 *         changeMode=ChangeMode? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (internalElement+=InternalElement internalElement+=InternalElement*)?
	 *     )
	 */
	protected void sequence_InstanceHierarchy(ISerializationContext context, InstanceHierarchy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClassLib returns InterfaceClassLib
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         iD=EString? 
	 *         name=EString 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (interfaceClass+=InterfaceClass interfaceClass+=InterfaceClass*)?
	 *     )
	 */
	protected void sequence_InterfaceClassLib(ISerializationContext context, InterfaceClassLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceClass returns InterfaceClass
	 *     InterfaceClass_Impl returns InterfaceClass
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         iD=EString? 
	 *         name=ID 
	 *         refBaseClassPath=EString? 
	 *         baseClass=[InterfaceClass|ID]? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)? 
	 *         (interfaceClass+=InterfaceClass interfaceClass+=InterfaceClass*)?
	 *     )
	 */
	protected void sequence_InterfaceClass_Impl(ISerializationContext context, InterfaceClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceNameMapping returns InterfaceNameMapping
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         roleInterfaceName=EString 
	 *         systemUnitInterfaceName=EString 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)?
	 *     )
	 */
	protected void sequence_InterfaceNameMapping(ISerializationContext context, InterfaceNameMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass returns InternalElement
	 *     InternalElement returns InternalElement
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         iD=EString? 
	 *         changeMode=ChangeMode? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)? 
	 *         (externalInterface+=ExternalInterface externalInterface+=ExternalInterface*)? 
	 *         (internalElement+=InternalElement internalElement+=InternalElement*)? 
	 *         (supportedRoleClass+=SupportedRoleClass supportedRoleClass+=SupportedRoleClass*)? 
	 *         (internalLink+=InternalLink internalLink+=InternalLink*)? 
	 *         (systemUnitClass+=SystemUnitClass systemUnitClass+=SystemUnitClass*)?
	 *     )
	 */
	protected void sequence_InternalElement(ISerializationContext context, InternalElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternalLink returns InternalLink
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         partnerSideA=[InterfaceClass|ID]? 
	 *         partnerSideB=[InterfaceClass|ID]? 
	 *         changeMode=ChangeMode? 
	 *         iD=ID? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)?
	 *     )
	 */
	protected void sequence_InternalLink(ISerializationContext context, InternalLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (attributeNameMapping+=AttributeNameMapping attributeNameMapping+=AttributeNameMapping*)? 
	 *         (interfaceNameMapping+=InterfaceNameMapping interfaceNameMapping+=InterfaceNameMapping*)?
	 *     )
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NominalScaled returns NominalScaled
	 *
	 * Constraint:
	 *     {NominalScaled}
	 */
	protected void sequence_NominalScaled(ISerializationContext context, NominalScaled semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OrdinalScaled returns OrdinalScaled
	 *
	 * Constraint:
	 *     (requiredMaxValue=EString? requiredValue=EString? requiredMinValue=EString?)
	 */
	protected void sequence_OrdinalScaled(ISerializationContext context, OrdinalScaled semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefSemantic returns RefSemantic
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         correspondingAttributePath=EString 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)?
	 *     )
	 */
	protected void sequence_RefSemantic(ISerializationContext context, RefSemantic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Revision returns Revision
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         revisionDate=DateTime 
	 *         oldVersion=EString? 
	 *         newVersion=EString? 
	 *         authorName=EString 
	 *         comment=EString? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)?
	 *     )
	 */
	protected void sequence_Revision(ISerializationContext context, Revision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClassLib returns RoleClassLib
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         iD=EString? 
	 *         name=EString 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (roleClass+=RoleClass roleClass+=RoleClass*)?
	 *     )
	 */
	protected void sequence_RoleClassLib(ISerializationContext context, RoleClassLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleClass returns RoleClass
	 *     RoleClass_Impl returns RoleClass
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         iD=EString? 
	 *         name=EString 
	 *         refBaseClassPath=EString? 
	 *         baseClass=[RoleClass|ID]? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)? 
	 *         (externalInterface+=ExternalInterface externalInterface+=ExternalInterface*)? 
	 *         (roleClass+=RoleClass roleClass+=RoleClass*)?
	 *     )
	 */
	protected void sequence_RoleClass_Impl(ISerializationContext context, RoleClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleFamily returns RoleFamily
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         iD=EString? 
	 *         name=EString 
	 *         refBaseClassPath=EString? 
	 *         baseClass=[RoleClass|ID]? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)? 
	 *         (externalInterface+=ExternalInterface externalInterface+=ExternalInterface*)? 
	 *         (roleClass+=RoleClass roleClass+=RoleClass*)?
	 *     )
	 */
	protected void sequence_RoleFamily(ISerializationContext context, RoleFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleRequirements returns RoleRequirements
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         refBaseRoleClassPath=EString? 
	 *         roleClass=[RoleClass|ID]? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)? 
	 *         (externalInterface+=InterfaceClass externalInterface+=InterfaceClass*)?
	 *     )
	 */
	protected void sequence_RoleRequirements(ISerializationContext context, RoleRequirements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SupportedRoleClass returns SupportedRoleClass
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         refRoleClassPath=EString 
	 *         roleClass=[RoleClass|ID] 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         mappingObject=Mapping?
	 *     )
	 */
	protected void sequence_SupportedRoleClass(ISerializationContext context, SupportedRoleClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClassLib returns SystemUnitClassLib
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         iD=EString? 
	 *         name=EString 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (systemUnitClass+=SystemUnitClass systemUnitClass+=SystemUnitClass*)?
	 *     )
	 */
	protected void sequence_SystemUnitClassLib(ISerializationContext context, SystemUnitClassLib semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitClass returns SystemUnitClass
	 *     SystemUnitClass_Impl returns SystemUnitClass
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         iD=EString? 
	 *         name=ID 
	 *         refBaseClassPath=EString? 
	 *         baseClass=[SystemUnitClass|ID]? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)? 
	 *         (externalInterface+=ExternalInterface externalInterface+=ExternalInterface*)? 
	 *         (internalElement+=InternalElement internalElement+=InternalElement*)? 
	 *         (supportedRoleClass+=SupportedRoleClass supportedRoleClass+=SupportedRoleClass*)? 
	 *         (internalLink+=InternalLink internalLink+=InternalLink*)? 
	 *         (systemUnitClass+=SystemUnitClass systemUnitClass+=SystemUnitClass*)?
	 *     )
	 */
	protected void sequence_SystemUnitClass_Impl(ISerializationContext context, SystemUnitClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemUnitFamily returns SystemUnitFamily
	 *
	 * Constraint:
	 *     (
	 *         changeMode=ChangeMode? 
	 *         iD=EString? 
	 *         name=EString 
	 *         refBaseClassPath=EString? 
	 *         baseClass=[SystemUnitClass|ID]? 
	 *         description=Description? 
	 *         version=Version? 
	 *         (revision+=Revision revision+=Revision*)? 
	 *         copyright=Copyright? 
	 *         (additionalInformation+=AdditionalInformation additionalInformation+=AdditionalInformation*)? 
	 *         (attribute+=Attribute attribute+=Attribute*)? 
	 *         (externalInterface+=InterfaceClass externalInterface+=InterfaceClass*)? 
	 *         (internalElement+=InternalElement internalElement+=InternalElement*)? 
	 *         (supportedRoleClass+=SupportedRoleClass supportedRoleClass+=SupportedRoleClass*)? 
	 *         (internalLink+=InternalLink internalLink+=InternalLink*)? 
	 *         (systemUnitClass+=SystemUnitClass systemUnitClass+=SystemUnitClass*)?
	 *     )
	 */
	protected void sequence_SystemUnitFamily(ISerializationContext context, SystemUnitFamily semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnknownType returns UnknownType
	 *
	 * Constraint:
	 *     requirements=EString?
	 */
	protected void sequence_UnknownType(ISerializationContext context, UnknownType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Version returns Version
	 *
	 * Constraint:
	 *     (value=EString? changeMode=ChangeMode?)
	 */
	protected void sequence_Version(ISerializationContext context, Version semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
