/*
 * generated by Xtext 2.10.0
 */
package caex.caex215.scoping

import caex.caex215.caex.CAEXPackage
import caex.caex215.caex.ExternalInterface
import caex.caex215.caex.InternalLink
import java.util.ArrayList
import java.util.List
import org.eclipse.emf.common.util.TreeIterator
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class CAEXtextScopeProvider extends AbstractCAEXtextScopeProvider {

	override getScope(EObject context, EReference reference) {
		if (context instanceof InternalLink &&
			(reference == CAEXPackage.Literals.INTERNAL_LINK__PARTNER_SIDE_A ||
				reference == CAEXPackage.Literals.INTERNAL_LINK__PARTNER_SIDE_B)) {
					val TreeIterator<EObject> it = context.eResource().getAllContents();
					val List<EObject> list = new ArrayList<EObject>();
					while (it.hasNext()) {
						var EObject object = it.next();
						if (object instanceof ExternalInterface) {
							list.add(object);
						}
					}
					return Scopes.scopeFor(list);
				}

				return super.getScope(context, reference);
			}

		}
		